export declare const Namespace: "events";
export declare const Strings: {
    readonly 'empty-state-title': "No Events Match";
    readonly 'empty-state-description': "There are no events that match your filters or selected view. Adjust your filters or view to see your events.";
    readonly 'group-empty-state-title': "Event Group Not Found";
    readonly 'sort-ascending': "Sort 1-9";
    readonly 'sort-descending': "Sort 9-1";
    readonly 'date-and-time': "Date & Time";
    readonly 'show-elapsed-time': "Show Elapsed Time & Duration";
    readonly 'event-type': "Event Type";
    readonly 'workflow-events': "Workflow Events";
    readonly category: {
        readonly all: "All";
        readonly activity: "Activity";
        readonly 'activity-tooltip': "An Activity is a normal function or method execution that's intended to execute a single, well-defined action.";
        readonly 'child-workflow': "Child Workflow";
        readonly 'child-workflow-tooltip': "A Child Workflow Execution is a Workflow Execution that is spawned from within another Workflow in the same Namespace.";
        readonly command: "Command";
        readonly 'command-tooltip': "Command Events";
        readonly other: "Other";
        readonly 'other-tooltip': "Marker Recorded, Upsert Search Attributes and Workflow Properties Modified.";
        readonly 'local-activity': "Local Activity";
        readonly 'local-activity-tooltip': "A Local Activity is an Activity Execution that executes in the same process as the Workflow Execution that spawns it.";
        readonly nexus: "Nexus";
        readonly 'nexus-tooltip': "Nexus connects durable executions within and across Namespaces.";
        readonly signal: "Signal";
        readonly 'signal-tooltip': "Signals are asynchronous write requests. They cause changes in the running Workflow, but you cannot await any response or error.";
        readonly timer: "Timer";
        readonly 'timer-tooltip': "Timers are durable timers set for a fixed time period.";
        readonly update: "Update";
        readonly 'update-tooltip': "Updates are synchronous, tracked write requests. The sender of the Update can wait for a response on completion or an error on failure.";
        readonly workflow: "Workflow";
        readonly 'workflow-tooltip': "A Workflow Task is a Task that contains the context needed to make progress with a Workflow Execution.";
    };
    readonly 'attribute-group': {
        readonly activity: "Activity";
        readonly parent: "Parent";
        readonly 'retry-policy': "Retry Policy";
        readonly schedule: "Schedule";
        readonly 'search-attributes': "Search Attributes";
        readonly summary: "Summary";
        readonly 'task-queue': "Task Queue";
        readonly workflow: "Workflow";
    };
    readonly 'custom-search-attributes': "Custom Search Attributes";
    readonly 'custom-search': "custom search";
    readonly attribute: "attribute";
    readonly 'event-group': "Events related to {{eventName}}";
    readonly 'error-event': "Error Event";
    readonly 'import-event-history': "Import Event History";
    readonly 'import-event-history-file-upload': "Select an event history JSON file to upload";
    readonly 'event-history-view': "Event History View";
    readonly 'api-history-link': "View in Github";
    readonly 'history-expected-formats': "Expected JSON formats";
    readonly 'event-history-import-error': "Could not create event history from JSON";
    readonly 'event-history-load-error': "Could not parse JSON";
    readonly 'event-classification-label': "Event Classification";
    readonly 'event-classification': {
        readonly unspecified: "Unspecified";
        readonly scheduled: "Scheduled";
        readonly open: "Open";
        readonly new: "New";
        readonly started: "Started";
        readonly initiated: "Initiated";
        readonly running: "Running";
        readonly completed: "Completed";
        readonly fired: "Fired";
        readonly cancelrequested: "Cancel Requested";
        readonly timedout: "Timed Out";
        readonly signaled: "Signaled";
        readonly canceled: "Canceled";
        readonly failed: "Failed";
        readonly terminated: "Terminated";
        readonly pending: "Pending";
        readonly retrying: "Retrying";
    };
    readonly 'decode-event-history': "Decode Event History";
    readonly encoded: "Encoded";
    readonly decoded: "Decoded";
    readonly 'decoded-description': "Codec Server decoded and base64 encoded";
    readonly readable: "Human Readable";
    readonly 'readable-description': "Codec Server decoded and base64 decoded";
    readonly 'event-types': "Event Types";
    readonly 'decode-failed': "Decoding failed";
};
